apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "common.names.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: {{ template "common.names.fullname" . }}
    {{- with .Values.scim.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.scim.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "common.names.fullname" . }}
  {{- if not .Values.scim.autoscaling.enabled }}
  replicas: {{ .Values.scim.replicaCount }}
  {{- end }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ template "common.names.fullname" . }}
        version: {{ tpl .Values.scim.version . }}
        app.kubernetes.io/component: {{ template "common.names.fullname" . }}
        {{- with .Values.scim.podLabels }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.scim.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.scim.serviceAccount.create }}
        {{- if .Values.scim.serviceAccount.name }}
      serviceAccountName: {{ .Values.scim.serviceAccount.name }}
        {{- else }}
      serviceAccountName: {{ template "common.names.fullname" . }}
        {{- end }}
      {{- end }}
      {{- with .Values.scim.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.scim.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.scim.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if semverCompare ">=1.20-0" .Capabilities.KubeVersion.GitVersion }}
      securityContext:
        fsGroup: 999
      {{- end }}
      {{- if .Values.scim.credentials.volume.enabled }}
      volumes:
        - name: "{{ template "common.names.fullname" . }}-credentials"
          {{- if eq .Values.scim.credentials.volume.kind "CSI" }}
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "{{ template "common.names.fullname" . }}-credentials"
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ template "common.names.fullname" . }}-pvc
          {{- end }}
      {{- end }}
      {{- if semverCompare "<1.20-0" .Capabilities.KubeVersion.GitVersion }}
      {{- if .Values.scim.credentials.volume.enabled }}
      {{- if .Values.scim.credentials.volume.create }}
      initContainers:
        - name: opuser-home-permissions
          image: alpine:3.16
          command:
            - "/bin/sh"
            - "-c"
          args:
            - "mkdir -p /home/opuser/.op && chown -R 999 /home/opuser && chmod -R 700 /home/opuser"
          volumeMounts:
            - mountPath: /home/opuser/.op
              name: {{ template "common.names.fullname" . }}-credentials
          {{- with .Values.scim.initContainers.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ template "common.names.fullname" . }}
          image: {{ .Values.scim.imageRepository }}:{{ tpl .Values.scim.version . }}
          imagePullPolicy: {{ .Values.scim.imagePullPolicy }}
          command: ["/op-scim/op-scim"]
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
          {{- with .Values.scim.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.scim.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: "OP_PORT"
              value: "{{ .Values.scim.httpPort }}"
            - name: "OP_SESSION"
              {{- if .Values.scim.credentials.volume.enabled }}
              value: "/home/opuser/.op/{{ .Values.scim.credentials.volume.files.scimsessionFile }}"
              {{- end }}
              {{- if and (eq .Values.scim.credentials.secrets.enabled true) (ne .Values.scim.credentials.secrets.kind "SecretProviderClass") }}
              valueFrom:
                secretKeyRef:
                  name: "{{ tpl .Values.scim.credentials.secrets.name . }}"
                  key: {{ .Values.scim.credentials.secrets.scimsession.key }}
              {{- end }}
            - name: "OP_WORKSPACE_SETTINGS"
              {{- if .Values.scim.credentials.volume.enabled }}
              value: "/home/opuser/.op/{{ .Values.scim.credentials.volume.files.workspaceSettingsFile }}"
              {{- end }}
              {{- if and (eq .Values.scim.credentials.secrets.enabled true) (ne .Values.scim.credentials.secrets.kind "SecretProviderClass") }}
              valueFrom:
                secretKeyRef:
                  name: "{{ tpl .Values.scim.credentials.secrets.name . }}"
                  key: {{ .Values.scim.credentials.secrets.workspaceSettings.key }}
              {{- end }}
            - name: "OP_WORKSPACE_CREDENTIALS"
              {{- if .Values.scim.credentials.volume.enabled }}
              value: "/home/opuser/.op/{{ .Values.scim.credentials.volume.files.workspaceCredentialsFile }}"
              {{- end }}
              {{- if and (eq .Values.scim.credentials.secrets.enabled true) (ne .Values.scim.credentials.secrets.kind "SecretProviderClass") }}
              valueFrom:
                secretKeyRef:
                  name: "{{ tpl .Values.scim.credentials.secrets.name . }}"
                  key: {{ .Values.scim.credentials.secrets.workspaceCredentials.key }}
              {{- end }}
            - name: "OP_REDIS_URL"
              value: "{{ tpl .Values.scim.config.redisURL . }}"
            - name: "OP_PING_SERVER"
              value: "{{ .Values.scim.probes.liveness.enabled }}"
            {{- if .Values.scim.config.letsEncryptDomain }}
            - name: "OP_LETSENCRYPT_DOMAIN"
              value: "{{ .Values.scim.config.letsEncryptDomain }}"
            {{- end }}
            {{- if .Values.scim.config.domain }}
            - name: "OP_DOMAIN"
              value: {{ .Values.scim.config.domain }}
            {{- end }}
            {{- if .Values.scim.config.debug }}
            - name: "OP_DEBUG"
              value: "{{ .Values.scim.config.debug }}"
            {{- end }}
            {{- if .Values.scim.config.jsonLogs }}
            - name: "OP_JSON_LOGS"
              value: "{{ .Values.scim.config.jsonLogs }}"
            {{- end }}
            {{- if .Values.scim.config.prettyLogs }}
            - name: "OP_PRETTY_LOGS"
              value: "{{ .Values.scim.config.prettyLogs }}"
            {{- end }}
          ports:
            - containerPort: {{ .Values.scim.httpPort }}
            - containerPort: {{ .Values.scim.httpsPort }}
          {{- if .Values.scim.probes.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.scim.probes.liveness.path }}
              scheme: HTTP
              port: {{ .Values.scim.httpPort }}
            failureThreshold: 3
            periodSeconds: 30
            initialDelaySeconds: 15
          {{- end }}
          {{- if .Values.scim.credentials.volume.enabled }}
          {{- if .Values.scim.credentials.volume.create }}
          volumeMounts:
            - name: {{ template "common.names.fullname" . }}-credentials
              mountPath: "/home/opuser/.op"
              readOnly: true
          {{- end }}
          {{- end }}
